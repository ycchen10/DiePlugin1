//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  C:\Users\ycchen10\OneDrive - kochind.com\Desktop\MolexPlugIn-12.0\UI\DimensionMinRad.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: ycchen10
//              Version: NX 11
//              Date: 05-27-2020  (Format: mm-dd-yyyy)
//              Time: 08:59 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using NXOpen;
using NXOpen.BlockStyler;
using System.Collections.Generic;
using Basic;
using DiePlugin.DAL;
namespace DiePlugin
{


    //------------------------------------------------------------------------------
    //Represents Block Styler application class
    //------------------------------------------------------------------------------
    public class DimensionMinRad
    {
        //class members
        private static Session theSession = null;
        private static UI theUI = null;
        private string theDlxFileName;
        private NXOpen.BlockStyler.BlockDialog theDialog;
        private NXOpen.BlockStyler.Group group0;// Block type: Group
        private NXOpen.BlockStyler.SelectObject seleEdge;// Block type: Selection
        private NXOpen.BlockStyler.Group group;// Block type: Group
        private NXOpen.BlockStyler.Label label0;// Block type: Label
        private NXOpen.BlockStyler.Label labelMinDia;// Block type: Label

        private List<Face> faces = new List<Face>();
        //------------------------------------------------------------------------------
        //Constructor for NX Styler class
        //------------------------------------------------------------------------------
        public DimensionMinRad()
        {
            try
            {
                theSession = Session.GetSession();
                theUI = UI.GetUI();
                theDlxFileName = "DimensionMinRad.dlx";
                theDialog = theUI.CreateDialog(theDlxFileName);
                theDialog.AddOkHandler(new NXOpen.BlockStyler.BlockDialog.Ok(ok_cb));
                theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
                theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(initialize_cb));
                theDialog.AddDialogShownHandler(new NXOpen.BlockStyler.BlockDialog.DialogShown(dialogShown_cb));
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                throw ex;
            }
        }

        //------------------------------------------------------------------------------
        //This method shows the dialog on the screen
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogResponse Show()
        {
            try
            {
                theDialog.Show();
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return 0;
        }

        //------------------------------------------------------------------------------
        //Method Name: Dispose
        //------------------------------------------------------------------------------
        public void Dispose()
        {
            if (theDialog != null)
            {
                theDialog.Dispose();
                theDialog = null;
            }
        }

        //------------------------------------------------------------------------------
        //---------------------Block UI Styler Callback Functions--------------------------
        //------------------------------------------------------------------------------

        //------------------------------------------------------------------------------
        //Callback Name: initialize_cb
        //------------------------------------------------------------------------------
        public void initialize_cb()
        {
            try
            {
                group0 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group0");
                seleEdge = (NXOpen.BlockStyler.SelectObject)theDialog.TopBlock.FindBlock("seleEdge");
                group = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group");
                label0 = (NXOpen.BlockStyler.Label)theDialog.TopBlock.FindBlock("label0");
                labelMinDia = (NXOpen.BlockStyler.Label)theDialog.TopBlock.FindBlock("labelMinDia");

                //Selection.MaskTriple maskEdge = new Selection.MaskTriple()
                //{
                //    Type = NXOpen.UF.UFConstants.UF_solid_type,
                //    Subtype = 0,
                //    SolidBodySubtype = NXOpen.UF.UFConstants.UF_UI_SEL_FEATURE_ANY_EDGE

                //};

                Selection.MaskTriple maskFace = new Selection.MaskTriple()
                {
                    Type = 70,
                    Subtype = 2,
                    SolidBodySubtype = 20

                };
                Selection.MaskTriple[] masks = { maskFace };
                seleEdge.SetSelectionFilter(Selection.SelectionAction.ClearAndEnableSpecific, masks);//过滤只选择边

            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
        }

        //------------------------------------------------------------------------------
        //Callback Name: dialogShown_cb
        //This callback is executed just before the dialog launch. Thus any value set 
        //here will take precedence and dialog will be launched showing that value. 
        //------------------------------------------------------------------------------
        public void dialogShown_cb()
        {
            try
            {
                //---- Enter your callback code here -----
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
        }

        //------------------------------------------------------------------------------
        //Callback Name: update_cb
        //------------------------------------------------------------------------------
        public int update_cb(NXOpen.BlockStyler.UIBlock block)
        {
            try
            {
                if (block == seleEdge)
                {
                    //---------Enter your code here-----------

                    faces.Clear();
                    faces = GetFace(seleEdge.GetSelectedObjects());

                    if (faces.Count > 0)
                    {
                        double min = GetMinRadOfFace(faces);
                        labelMinDia.Label = (min / 2).ToString();
                    }

                }
                else if (block == label0)
                {
                    //---------Enter your code here-----------
                }
                else if (block == labelMinDia)
                {
                    //---------Enter your code here-----------
                }
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return 0;
        }

        //------------------------------------------------------------------------------
        //Callback Name: ok_cb
        //------------------------------------------------------------------------------
        public int ok_cb()
        {
            int errorCode = 0;
            try
            {
                //---- Enter your callback code here -----

                if (faces.Count > 0)
                {
                    double min = GetMinRadOfFace(faces);
                    SetNode(min / 2);
                }
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                errorCode = 1;
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return errorCode;
        }

        //------------------------------------------------------------------------------
        //Function Name: GetBlockProperties
        //Returns the propertylist of the specified BlockID
        //------------------------------------------------------------------------------
        public PropertyList GetBlockProperties(string blockID)
        {
            PropertyList plist = null;
            try
            {
                plist = theDialog.GetBlockProperties(blockID);
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return plist;
        }
        private List<Edge> GetEdges(TaggedObject[] objs)
        {
            List<Edge> edges = new List<Edge>();
            foreach (TaggedObject to in objs)
            {
                if (to is Edge)
                    edges.Add(to as Edge);
            }
            return edges;
        }
        private List<Face> GetFace(TaggedObject[] objs)
        {
            List<Face> edges = new List<Face>();
            foreach (TaggedObject to in objs)
            {
                if (to is Face)
                    edges.Add(to as Face);
            }
            return edges;
        }
        private double GetMinRad(List<Edge> edgs)
        {
            double min = 99999;
            foreach (Edge eg in edgs)
            {
                if (eg.SolidEdgeType == Edge.EdgeType.Circular)
                {
                    foreach (Face face in eg.GetFaces())
                    {
                        if (face.SolidFaceType == Face.FaceType.Cylindrical || face.SolidFaceType == Face.FaceType.Conical)
                        {
                            AbstractFaceSlopeAndDia abs = FaceSlopeAndDiaFactory.CreateFaceSlopeAndDia(face);
                            if (abs.Data.IntNorm == -1)
                            {
                                double[] slope;
                                double[] dia;
                                abs.GetSlopeAndDia(new Vector3d(0, 0, 1), out slope, out dia);
                                FaceColourForDia.SetFaceColour(face, dia[0]);
                                if (min > dia[0])
                                    min = dia[0];
                            }
                        }
                    }
                }
            }
            return min;
        }
        private double GetMinRadOfFace(List<Face> faces)
        {
            double min = 99999;
            faces[0].GetBody().Color = 87;
            foreach (Face face in faces)
            {

                if (face.SolidFaceType == Face.FaceType.Cylindrical || face.SolidFaceType == Face.FaceType.Conical)
                {
                    AbstractFaceSlopeAndDia abs = FaceSlopeAndDiaFactory.CreateFaceSlopeAndDia(face);
                    if (abs.Data.IntNorm == -1)
                    {
                        double[] slope;
                        double[] dia;
                        abs.GetSlopeAndDia(new Vector3d(0, 0, 1), out slope, out dia);
                        FaceColourForDia.SetFaceColour(face, dia[0]);
                        if (min > dia[0])
                            min = dia[0];
                    }
                }

            }
            return min;
        }
        private void SetNode(double min)
        {
            string temp = "最小内R角为" + min.ToString("f3");
            Basic.DrawingUtils.SetNote(new Point3d(470, 210, 0), 3.5, temp);
        }



    }
}
